const Scene = require('telegraf/scenes/base')
const Telegraf = require('telegraf')
const { Markup } = Telegraf

function showMainMenu(ctx) {
    ctx.reply('–û—Ç–∫—Ä—ã—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        Markup.keyboard([
            [{ text: "–ö–µ—à–±—ç–∫", request_contact: true, }, '–ú–µ–Ω—é'],
            ['–ê–∫—Ü–∏–∏', '–ö–æ–Ω—Ç–∞–∫—Ç—ã'],
            ['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']
        ]).resize().extra()
    );
}

class SceneGenerator {

    GenTestimonialScene() {

        const testimonials = new Scene('testimonials')

        testimonials.enter(async (ctx) => {
            console.log('Testimonials scene enter')
        })

        testimonials.hears("ü§© –í—Å–µ —á—É–¥–µ—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ, 5‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", async (ctx) => {
            ctx.session.state = { ...ctx?.session?.state, rating: '5' };
            console.log('testimonials click 5');
            ctx.reply('–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É 5!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ –Ω–∞—Å!')
        })

        testimonials.on('text', async (ctx) => {

            const testimonial = ctx.message.text;
            console.log('entered testimonian text');

            if (testimonial !== "‚Ü©Ô∏è –ù–∞–∑–∞–¥") {
                console.log('testimonial text entered');
                await showMainMenu(ctx)
                ctx.session.state = {}
                await ctx.scene.leave()
            }

            else {
                console.log('click testimonial –Ω–∞–∑–∞–¥');
                ctx.session.state = {}
                await ctx.scene.leave();
                await showMainMenu(ctx);
            }
        })

        return testimonials

    }

}

module.exports = SceneGenerator